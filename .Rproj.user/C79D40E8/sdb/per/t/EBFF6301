{
    "collab_server" : "",
    "contents" : "# データ確認\n\n# 初期化\nrm(list = ls())\ngc();gc()\n\n# パッケージ\nrequire(data.table)\nrequire(dplyr)\nrequire(RMeCab)\nrequire(ggplot2)\nrequire(caret)\nrequire(useful)\n# データ読み込み\ndata.train.raw <- fread(\"inputs/train.csv\")\ndata.test.raw <- fread(\"inputs/test.csv\")\n\n# trainとtestを結合\nnames(data.train.raw)\nnames(data.test.raw)\ndata.all.raw <- rbind(data.train.raw %>% select(-Survived), data.test.raw)\ndata.objective <- c(data.train.raw %>% select(Survived) %>% unlist(), rep(NA, nrow(data.test.raw)))\nfull <- data.frame(y = data.objective, data.all.raw) %>% as.data.table()\n\n# 基礎集計\nfull %>% select(Age, y) %>% group_by(y) %>% summarise(n = mean(Age, na.rm = T))\n\n# 特徴量作成----\n# 爵位など\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\nfull$Surname <- sapply(full$Name,  \n                       function(x) strsplit(x, split = '[,.]')[[1]][1])\nfull$Fsize <- full$SibSp + full$Parch + 1\nfull$Family <- paste(full$Surname, full$Fsize, sep='_')\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 4] <- 'large'\nfull$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\nfull$Embarked[c(62, 830)] <- 'C'\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\nfull$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)\n# 女子供フラグ\nfemale_child_flag <- ifelse(full %>% select(Sex) == \"female\" | full %>% select(Age) < 10, yes = 1, no = 0 ) %>% as.vector()\n# 成年男子フラグ\nmale_adult_flag <- ifelse(full %>% select(Sex) == \"male\" & (full %>% select(Age) > 20 & full %>% select(Age) < 35), yes = 1, no = 0 ) %>% as.vector()\n\n# pclassを文字列化\nPclass_char <- full$Pclass %>% paste0(\"A\")\n\n# 名前でnグラム\n# unigram_name <- RMeCab::docNgramDF(mojiVec = full$Name\n#                                         , type = 1, pos = \"名詞\", minFreq = 1, N = 1)\n# bygram_name <- RMeCab::docNgramDF(mojiVec = full$Name\n#                                       , type = 1, pos = \"名詞\", minFreq = 1, N = 2)\n# チケット番号\nvector_ticket <- full$Ticket\ntic_num <- vector(length = length(vector_ticket))\ntic_char <- vector(length = length(vector_ticket))\nfor(i in 1 : length(vector_ticket)){\n  temp.tic <- strsplit(vector_ticket[i], \"\\\\s\") %>% unlist()\n  if(length(temp.tic) >= 1){\n    for(j in 1 : length(temp.tic)){\n      if(is.na(as.numeric(temp.tic[j]))){\n        tic_char[i] <- temp.tic[j]\n      }else{\n        tic_num[i] <- as.numeric(temp.tic[j])\n      }\n    }\n  }else{\n    tic_num[i] <- NA\n    tic_char[i] <- NA\n  }\n}\n# 部屋番号\ncabin_n <- c(NA, length = dim(full)[1])\ncabin_class_first <- c(NA, length = dim(full)[1])\ncabin_class_second <- c(NA, length = dim(full)[1])\ncabin_num <- c(NA, length = dim(full)[1])\nfor(i in 1 : dim(full)[1]){\n  temp_cabin <- strsplit(full$Cabin[i], \"\\\\s\") %>% unlist()\n  cabin_n[i] <- length(temp_cabin)\n  if(length(temp_cabin) != 0){\n    cabin_class_first[i] <- gsub(pattern = \"[0-9]\",replacement = \"\",temp_cabin) %>% head(1)\n    cabin_class_second[i] <- gsub(pattern = \"[0-9]\",replacement = \"\",temp_cabin) %>% tail(1)\n    cabin_num[i] <- gsub(pattern = \"[A-Z]\",replacement = \"\",temp_cabin) %>% as.numeric() %>% mean()\n  }else{\n    cabin_class_first[i] <- NA\n    cabin_class_second[i] <- NA\n    cabin_num[i] <- NA\n  }\n}\n\n# データ結合\ndata.all <- full %>% select(y, PassengerId, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked) %>% \n  mutate(Pclass_char = Pclass_char, tic_num = tic_num\n         , tic_char = tic_char\n         , cabin_n = cabin_n\n         , cabin_class_first = cabin_class_first, cabin_class_second = cabin_class_second, cabin_num = cabin_num\n         , female_child_flag = female_child_flag, male_adult_flag = male_adult_flag )\n# 欠損代入\ndata.all$Age[is.na(data.all$Age)] <-  median(data.all$Age, na.rm = T)\nAge_na <- ifelse(is.na(data.all$Age), 1, 0)\ndata.all$Fare[is.na(data.all$Fare)] <-  median(data.all$Fare, na.rm = T)\nFare_na <- ifelse(is.na(data.all$Fare), 1, 0)\ndata.all$cabin_class_first[is.na(data.all$cabin_class_first)] <-  median(data.all$cabin_class_first, na.rm = T)\ncabin_class_first_na <- ifelse(is.na(data.all$cabin_class_first), 1, 0)\ndata.all$cabin_class_second[is.na(data.all$cabin_class_second)] <-  median(data.all$cabin_class_second, na.rm = T)\ncabin_class_second_na <- ifelse(is.na(data.all$cabin_class_second), 1, 0)\ndata.all$cabin_num[is.na(data.all$cabin_num)] <-  median(data.all$cabin_num, na.rm = T)\ncabin_num_na <- ifelse(is.na(data.all$cabin_num), 1, 0)\ndata.all$female_child_flag[is.na(data.all$female_child_flag)] <-  median(data.all$female_child_flag, na.rm = T)\nfemale_child_flag_na <- ifelse(is.na(data.all$female_child_flag), 1, 0)\ndata.all$male_adult_flag[is.na(data.all$male_adult_flag)] <-  median(data.all$male_adult_flag, na.rm = T)\nmale_adult_flag_na <- ifelse(is.na(data.all$male_adult_flag), 1, 0)\n\ndata.all$y[is.na(data.all$y)] <-  -9999\ndata.all <- data.frame(data.all, Age_na, Fare_na, cabin_class_first_na , cabin_class_second_na, cabin_num_na, female_child_flag_na, male_adult_flag_na)\n\n# onehotencoding\ndata.all <- data.frame(y = data.all$y, build.x(y~.-1, data.all %>% as.data.frame()))\n\ndata.train.bygram <- data.frame(data.all ) %>% filter(!y == -9999)\ndata.test.bygram <- data.frame(data.all ) %>% filter(y == -9999)\ndata.train.bygram$y <- as.factor(data.train.bygram$y)\nwrite.csv(data.train.bygram, \"train.csv\")\nwrite.csv(data.test.bygram, \"test.csv\")\n\n# 変数の事前スクリーニング\nres.var.imp <- vector(length = (ncol(data.train.bygram)))\nres.var.imp[1] <- 0\nfor(i in 2 : (ncol(data.train.bygram))){\n  temp_data <- data.train.bygram %>% select(1, i)\n  n.unique <- nrow(unique(temp_data %>% select(-y)))\n  if(n.unique == 1){ # 変数がユニークかどうか\n    res.var.imp[i] <- 1\n  }else{\n    print(i)\n    temp_model <- glm(formula = y~., temp_data, family = \"binomial\")\n    li <- summary(temp_model)\n    coefficients <- tail(li$coefficients[2, ], 1)\n    res.var.imp[i] <- coefficients\n  }\n}\nname.use <- names(data.train.bygram)[res.var.imp < 0.95]\n# データ学習\nxgb_grid_1 = expand.grid(\n  nrounds = c(20, 30, 40), \n  max_depth = seq(5, 15, by = 2), \n  eta = seq(0.01, 0.2, by = 0.01), \n  gamma = seq(0.8, 1.2, by = 0.1), \n  colsample_bytree = seq(0.7, 1.2, by = 0.1), \n  min_child_weight = seq(0.7, 1.2, by = 0.1)\n)\n# pack the training control parameters\nxgb_trcontrol_1 = trainControl(\n  method = \"cv\",\n  number = 10,  \n  allowParallel = TRUE\n)\ntrained_model <- train(\n  data = data.train.bygram,\n  y ~.,\n  trControl = xgb_trcontrol_1,\n  tuneGrid = xgb_grid_1,\n  method = \"xgbTree\"\n)\npred <- predict(object = trained_model, data.test.bygram)\nprediction <- data.frame(PassengerId = data.test.raw$PassengerId, Survived = pred)\nwrite.csv(prediction, file = \"pred.csv\", row.names = F)\n",
    "created" : 1477742026696.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "726448657",
    "id" : "EBFF6301",
    "lastKnownWriteTime" : 1477740562,
    "last_content_update" : 1477740562,
    "path" : "~/Projects/kaggle/titanic/01_data_confirmation.R",
    "project_path" : "01_data_confirmation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}