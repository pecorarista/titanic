v.hyper[i] <- tmp.auc %>% as.numeric()
}
best.hyper <- which.max(v.hyper)
param <- list(objective = "binary:logistic",
eval_metric = "auc",
max_depth = hyperparamerters$max_depth[best.hyper],
eta = hyperparamerters$eta[best.hyper],
gamma = hyperparamerters$gamma[best.hyper],
subsample = hyperparamerters$subsample[best.hyper],
colsample_bytree = hyperparamerters$colsample_bytree[best.hyper],
min_child_weight = hyperparamerters$min_child_weight[best.hyper],
max_delta_step = hyperparamerters$max_delta_step[best.hyper]
)
trained.model <- xgboost(data = train.xgbD, missing = -9999, nrounds = cv.nrounds
, params = param, nfold = cv.nfold, verbose = F, prediction = T)
prediction.value <- predict(object = trained.model, test.xgbD)
predition.01 <- ifelse(test = prediction.value > 0.5, 1, 0)
prediction.test <- data.frame(PassengerId = data.test.raw$PassengerId, Survived = predition.01)
write.csv(prediction.test, file = "prediction.csv", row.names = F)
# 後処理----
# importance
importance <- xgb.importance(data.full.s.m.m@Dimnames[[2]], model = trained.model)
xgb.plot.importance(importance_matrix = importance)
max(v.hyper)
source("01_feauture_engineering.R")
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(tcltk)
# 関数読み込み
source("01_feauture_engineering.R")
# 第一弾の特徴量加工
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
warnings()
data.has.feauture[1:5, 1:5]
dim(data.has.feauture)
View(data.has.feauture)
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
warnings()
warnings()
data <- data.has.feauture
data.full <- data
i <- 4
mean(data.full[, i])
data.full[, i]
data.full[, 3]
data.full[1:4, 3] <- NA
data.full[, 3]
data.full[, "age"]
data.full[, "Age"]
mean(data.full[, "Age"])
mean(data.full[, "Age"], na.rm = T)
data.full <- data.frame(data.full, idx.null)
idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
idx.null
for(i in 1 : ncol(data.full)){
class.col <- class(data.full[, i])
print(paste(i, class.col))
if(sum(is.na(data.full[, i])) > 0){
print(names(data.full)[i])
# switch (class.col,
#         "numeric" = {
#           idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
#           data.full[is.na(data.full[, i]), i] <- -9999
#           data.full <- data.frame(data.full, idx.null)
#           names()
#         }
#         ,"integer" = {data.full[is.na(data.full[, i]), i] <- -9999}
#         ,"character" = {
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
#         ,"factor" = {
#           data.full[, i] <- data.full[, i] %>% as.character()
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
# )
}
}
for(i in 1 : ncol(data.full)){
class.col <- class(data.full[, i])
# print(paste(i, class.col))
if(sum(is.na(data.full[, i])) > 0){
print(names(data.full)[i])
# switch (class.col,
#         "numeric" = {
#           idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
#           data.full[is.na(data.full[, i]), i] <- -9999
#           data.full <- data.frame(data.full, idx.null)
#           names()
#         }
#         ,"integer" = {data.full[is.na(data.full[, i]), i] <- -9999}
#         ,"character" = {
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
#         ,"factor" = {
#           data.full[, i] <- data.full[, i] %>% as.character()
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
# )
}
}
# カテゴリカル変数の欠損には"unknown"を入れておく
for(i in 1 : ncol(data.full)){
class.col <- class(data.full[, i])
# print(paste(i, class.col))
if(sum(is.na(data.full[, i])) > 0 $ names(data.full)[i] != "Survived"){
print(names(data.full)[i])
# switch (class.col,
#         "numeric" = {
#           idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
#           data.full[is.na(data.full[, i]), i] <- -9999
#           data.full <- data.frame(data.full, idx.null)
#           names()
#         }
#         ,"integer" = {data.full[is.na(data.full[, i]), i] <- -9999}
#         ,"character" = {
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
#         ,"factor" = {
#           data.full[, i] <- data.full[, i] %>% as.character()
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
# )
}
}
for(i in 1 : ncol(data.full)){
class.col <- class(data.full[, i])
# print(paste(i, class.col))
if(sum(is.na(data.full[, i])) > 0 $ names(data.full)[i] != "Survived"){
print(names(data.full)[i])
# switch (class.col,
#         "numeric" = {
#           idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
#           data.full[is.na(data.full[, i]), i] <- -9999
#           data.full <- data.frame(data.full, idx.null)
#           names()
#         }
#         ,"integer" = {data.full[is.na(data.full[, i]), i] <- -9999}
#         ,"character" = {
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
#         ,"factor" = {
#           data.full[, i] <- data.full[, i] %>% as.character()
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
# )
}
}
i
sum(is.na(data.full[, i])) > 0 $ names(data.full)[i] != "Survived"
(names(data.full)[i] != "Survived")
sum(is.na(data.full[, i])) > 0 $ (names(data.full)[i] != "Survived")
sum(is.na(data.full[, i])) > 0
sum(is.na(data.full[, i])) > 0 $ (names(data.full)[i] != "Survived")
# カテゴリカル変数の欠損には"unknown"を入れておく
for(i in 1 : ncol(data.full)){
class.col <- class(data.full[, i])
# print(paste(i, class.col))
if(sum(is.na(data.full[, i])) > 0 & (names(data.full)[i] != "Survived")){
print(names(data.full)[i])
# switch (class.col,
#         "numeric" = {
#           idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
#           data.full[is.na(data.full[, i]), i] <- -9999
#           data.full <- data.frame(data.full, idx.null)
#           names()
#         }
#         ,"integer" = {data.full[is.na(data.full[, i]), i] <- -9999}
#         ,"character" = {
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
#         ,"factor" = {
#           data.full[, i] <- data.full[, i] %>% as.character()
#           data.full[data.full[, i]=="" | is.na(data.full[, i]), i] <- "unknown"
#           data.full[, i] <- data.full[, i] %>% as.factor()
#         }
# )
}
}
i
sum(is.na(data.full[, i])) > 0 & (names(data.full)[i] != "Survived")
print(names(data.full)[i])
idx.null <- ifelse(is.na(data.full[, i]), 1, 0)
data.full <- data.frame(data.full, idx.null)
names(data.full)[ncol(data.full)]
names(data.full)[ncol(data.full)] <- paste0(names(data.full)[i], "_null")
names(data.full)
source("02_preprocessing.R")
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(tcltk)
# 関数読み込み
source("01_feauture_engineering.R")
source("02_preprocessing.R")
# 第一弾の特徴量加工
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
data.list <- preProcessRawFeauture(method = "xgb", data.full = data.has.feauture)
is.na(data.full$Survived)
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(tcltk)
# 関数読み込み
source("01_feauture_engineering.R")
source("02_preprocessing.R")
# 第一弾の特徴量加工
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
# 前処理
data.list <- preProcessRawFeauture(method = "xgb", data.full = data.has.feauture)
data.list[[1]]
data.train <- data.list[[1]]
data.test <- data.list[2]]
data.test <- data.list[[2]]
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess(training, method = c("center", "scale"))
)
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(Matrix)
require(useful)
require(tcltk)
# install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
require(rstan)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess(training, method = c("center", "scale"))
)
data.list <- preProcessRawFeauture(method = "mi-one-hot", data.full = data.has.feauture)
data.train <- data.list[[1]]
data.test <- data.list[[2]]
names.var <- data.list[[3]]
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess(training, method = c("center", "scale"))
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess(method = c("center", "scale"))
)
library(doParallel)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess = c('center', 'scale'),
)
data.train[1:5, 1:5]
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(Matrix)
require(useful)
require(tcltk)
# install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
require(rstan)
library(doParallel)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
# 関数読み込み
source("01_feauture_engineering.R")
source("02_preprocessing.R")
source("03_train_models.R")
# 第一弾の特徴量加工
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
data.list <- preProcessRawFeauture(method = "mi-one-hot", data.full = data.has.feauture)
data.train <- data.list[[1]]
data.test <- data.list[[2]]
names.var <- data.list[[3]]
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger",
preProcess = c('center', 'scale'),
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
data = data.train,
as.factor(Survived) ~.,
trControl = tr,
method = "ranger"
)
tr
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "ranger",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "rf",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "rboist",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "rf",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10,
allowParallel = TRUE
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "glmnet",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "glmnet",
preProcess = c('center', 'scale'),
trControl = tr
)
tr = trainControl(
method = "cv",
number = 10
)
trained.model <- train(
as.factor(Survived) ~.,
data = data.train,
method = "glmnet",
preProcess = c('center', 'scale'),
trControl = tr
)
detectCores()
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(Matrix)
require(useful)
require(tcltk)
# install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
require(rstan)
source("01_feauture_engineering.R")
source("02_preprocessing.R")
source("03_train_models.R")
# 初期化
rm(list = ls())
gc();gc()
# パッケージ
require(data.table)
require(dplyr)
require(xgboost)
require(caret)
require(Matrix)
require(useful)
require(tcltk)
# install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
require(rstan)
# library(doParallel)
# cl <- makePSOCKcluster(4)
# registerDoParallel(cl)
# 関数読み込み
source("01_feauture_engineering.R")
source("02_preprocessing.R")
source("03_train_models.R")
# 第一弾の特徴量加工
data.has.feauture <- createRawfeauture(train = "inputs/train.csv", test = "inputs/test.csv")
source("03_train_models.R")
# モデリング-xgbliner
list.res.xgbliner <- trainXgbLinerCaret(data.train = data.train.mi, data.test = data.test.mi)
prediction <- data.frame(PassengerId = 892:1309, Survived = list.res.xgbliner$pred)
write.csv(prediction, file = "predictionFiles/pred_xgbliner.csv", row.names = F)
# モデリング-xgbtree
list.res.xgbtree <- trainXgbTreeCaret(data.train = data.train.mi, data.test = data.test.mi)
prediction <- data.frame(PassengerId = 892:1309, Survived = list.res.xgbtree$pred)
write.csv(prediction, file = "predictionFiles/pred_xgbtree.csv", row.names = F)
# 前処理
data.list.mi <- preProcessRawFeauture(method = "mi-one-hot", data.full = data.has.feauture)
data.train.mi <- data.list.mi[[1]]
data.test.mi <- data.list.mi[[2]]
names.var.mi <- data.list.mi[[3]]
# モデリング-xgbliner
list.res.xgbliner <- trainXgbLinerCaret(data.train = data.train.mi, data.test = data.test.mi)
prediction <- data.frame(PassengerId = 892:1309, Survived = list.res.xgbliner$pred)
write.csv(prediction, file = "predictionFiles/pred_xgbliner.csv", row.names = F)
# モデリング-xgbtree
list.res.xgbtree <- trainXgbTreeCaret(data.train = data.train.mi, data.test = data.test.mi)
prediction <- data.frame(PassengerId = 892:1309, Survived = list.res.xgbtree$pred)
write.csv(prediction, file = "predictionFiles/pred_xgbtree.csv", row.names = F)
prediction
xgb.plot.importance(importance_matrix = list.res.xgb$imp)
list.res.xgb
